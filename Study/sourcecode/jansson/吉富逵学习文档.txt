1.json_typeof
输入：json_t对象
输出：返回对象的类型
JSON_OBJECT=0,
JSON_ARRAY=1,
JSON_STRING=2,
JSON_INTEGER=3,
JSON_REAL=4,
JSON_TRUE=5,
JSON_FALSE=6,
JSON_NULL=7


2.json_is_object
输入：json_t对象
输出：传入的json对象是否是对象类型


3.json_is_array
输入：json_t对象
输出：传入的json对象是否是数组类型

4.json_is_string
输入：json_t对象
输出：传入的json对象是否是字符串类型

5.json_is_integer
输入：json_t对象
输出：传入的json对象是否是整型类型

6.json_is_real



7.json_is_true


8.json_is_false


9.json_is_null



10.json_is_number
输入：json_t对象
输出：如果json_t的类型是整型和real类型返回true反之返回NULL.


11.json_is_boolean
输入：json_t对象
输出：传入的json对象是JSON_TRUE或者是JSON_FALSE返回true其他返回NULL

12.json_incref
输入：json_t对象
输出：无
增加json对象的应用数量


13.json_decref
输入：json_t对象
输出：无
减少json对象的引用数量为0


14.json_true


15.json_false


16.json_boolean


17.json_null


18.json_string
输入：const char*
输出：创建一个json类型的字符串

19.json_stringn
输入：const char*和取值的长度
输出：创建一个json类型的字符串，字符串包含空字符




20.json_string_nocheck
输入：const char*
输出：创建一个json类型的字符串
不检查传入的字符串是不是合法的utf-8编码

21.json_stringn_nocheck
输入：const char*和取值的长度
输出：创建一个json类型的字符串，字符串包含空字符



22.json_string_value
输人：传入的json字符串类型
输出：字符串


23.json_string_length
输人：传入的json字符串类型
输出：字符串的字符个数

24.json_string_set


25.json_string_setn


26.json_string_set_nocheck


27.json_string_setn_nocheck


28.json_sprintf


29.json_vsprintf


30.json_int_t


31.json_integer

32.json_integer_value


33.json_integer_set


34.json_real


35.json_real_value


36.json_real_set


37.json_number_value

38.json_array

39.json_array_size

40.json_array_get


41.json_array_set

42.json_array_set_new

43.json_array_append


44.json_array_append_new


45.json_array_insert

46.json_array_insert_new

47.json_array_remove

48.json_array_clear

49.json_array_extend

50.json_array_foreach


51.json_object

52.json_object_size
输入：json_t对象
输出：json对象中下一级对象的个数

53.json_object_get

54.json_object_set


55.json_object_set_nocheck


56.json_object_set_new


57.json_object_set_new_nocheck


58.json_object_del



59.json_object_clear


60.json_object_update


61.json_object_update_existing


62.json_object_update_missing


63.json_object_foreach


64.json_object_foreach_safe


65.json_object_iter


66.json_object_iter_at

67.json_object_iter_next


68.json_object_iter_key

69.json_object_iter_value

70.json_object_iter_set


71.json_object_iter_set_new


72.json_object_key_to_iter


73.json_object_seed


74.json_error_t





编码标记
JSON_INDENT 0~31：指定空白符的数量
JSON_COMPACT 0x20：数据压缩
JSON_ENSURE_ASCII 0x40：只输出ASCII字符
JSON_SORT_KEYS 0x80:输出根据key进行排序
JSON_PRESERVE_ORDER 0x100：按照key的添加顺序排序
JSON_ENCODE_ANY 0x200:可以对除对象和数组的json对象进行编码
JSON_ESCAPE_SLASH 0x400：将/转译为\/
JSON_REAL_PRECISION(n) (n) & 0x1F) << 11：设置输出实数的精度范围
JSON_EMBED 0x10000：省略顶级封闭符号[]或者{}


75.json_dumps
输入：json对象
输出：字符串，这个字符串必须使用free进行释放

76.json_dumpb
将json对象写入到字符串中，并规定写的数量，返回写入的数量

77.json_dumpf


78.json_dumpfd


79.json_dump_file


80.json_dump_callback





解码标记
JSON_REJECT_DUPLICATES 0x1：拒绝重复的键
JSON_DECODE_ANY 0x2：接受任何合法的json字符串
JSON_DISABLE_EOF_CHECK 0x4：
JSON_DECODE_INT_AS_REAL 0x8：将整型数解码为浮点数
JSON_ALLOW_NUL 0x10：允许接受null
81.json_loads


82.json_loadb


83.json_loadf


84.json_loadfd


85.json_load_file


86.json_load_callback

87.json_pack


88.json_pack_ex


89.json_vpack_ex


90.json_unpack


91.json_unpack_ex


92.json_vunpack_ex


93.json_equal


94.json_copy


95.json_deep_copy


96.json_set_alloc_funcs


97.json_get_alloc_funcs



98.
